/*
 * This file is generated by jOOQ.
 */
package demo.delivery_project.jooq.tables;


import demo.delivery_project.jooq.Keys;
import demo.delivery_project.jooq.Public;
import demo.delivery_project.jooq.tables.records.CarrierRegionsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CarrierRegions extends TableImpl<CarrierRegionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.carrier_regions</code>
     */
    public static final CarrierRegions CARRIER_REGIONS = new CarrierRegions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarrierRegionsRecord> getRecordType() {
        return CarrierRegionsRecord.class;
    }

    /**
     * The column <code>public.carrier_regions.carrier_id</code>.
     */
    public final TableField<CarrierRegionsRecord, UUID> CARRIER_ID = createField(DSL.name("carrier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.carrier_regions.region_id</code>.
     */
    public final TableField<CarrierRegionsRecord, UUID> REGION_ID = createField(DSL.name("region_id"), SQLDataType.UUID.nullable(false), this, "");

    private CarrierRegions(Name alias, Table<CarrierRegionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CarrierRegions(Name alias, Table<CarrierRegionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.carrier_regions</code> table reference
     */
    public CarrierRegions(String alias) {
        this(DSL.name(alias), CARRIER_REGIONS);
    }

    /**
     * Create an aliased <code>public.carrier_regions</code> table reference
     */
    public CarrierRegions(Name alias) {
        this(alias, CARRIER_REGIONS);
    }

    /**
     * Create a <code>public.carrier_regions</code> table reference
     */
    public CarrierRegions() {
        this(DSL.name("carrier_regions"), null);
    }

    public <O extends Record> CarrierRegions(Table<O> child, ForeignKey<O, CarrierRegionsRecord> key) {
        super(child, key, CARRIER_REGIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<CarrierRegionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CARRIER_REGIONS_CARRIER_ID_KEY);
    }

    @Override
    public List<ForeignKey<CarrierRegionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CARRIER_REGIONS__CARRIER_REGIONS_CARRIER_ID_FKEY, Keys.CARRIER_REGIONS__CARRIER_REGIONS_REGION_ID_FKEY);
    }

    private transient Users _users;
    private transient Regions _regions;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.CARRIER_REGIONS__CARRIER_REGIONS_CARRIER_ID_FKEY);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.regions</code> table.
     */
    public Regions regions() {
        if (_regions == null)
            _regions = new Regions(this, Keys.CARRIER_REGIONS__CARRIER_REGIONS_REGION_ID_FKEY);

        return _regions;
    }

    @Override
    public CarrierRegions as(String alias) {
        return new CarrierRegions(DSL.name(alias), this);
    }

    @Override
    public CarrierRegions as(Name alias) {
        return new CarrierRegions(alias, this);
    }

    @Override
    public CarrierRegions as(Table<?> alias) {
        return new CarrierRegions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CarrierRegions rename(String name) {
        return new CarrierRegions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarrierRegions rename(Name name) {
        return new CarrierRegions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarrierRegions rename(Table<?> name) {
        return new CarrierRegions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
