/*
 * This file is generated by jOOQ.
 */
package demo.delivery_project.jooq.tables;


import demo.delivery_project.jooq.Keys;
import demo.delivery_project.jooq.Public;
import demo.delivery_project.jooq.tables.records.TransactionsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>public.transactions.id</code>.
     */
    public final TableField<TransactionsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.transactions.score</code>.
     */
    public final TableField<TransactionsRecord, Short> SCORE = createField(DSL.name("score"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.transactions.code</code>.
     */
    public final TableField<TransactionsRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.transactions.carrier_username</code>.
     */
    public final TableField<TransactionsRecord, String> CARRIER_USERNAME = createField(DSL.name("carrier_username"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.transactions.request_code</code>.
     */
    public final TableField<TransactionsRecord, String> REQUEST_CODE = createField(DSL.name("request_code"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.transactions.offer_code</code>.
     */
    public final TableField<TransactionsRecord, String> OFFER_CODE = createField(DSL.name("offer_code"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.transactions.perform_time</code>. The courier
     * completes the transaction after delivering the product
     */
    public final TableField<TransactionsRecord, LocalDateTime> PERFORM_TIME = createField(DSL.name("perform_time"), SQLDataType.LOCALDATETIME(6), this, "The courier completes the transaction after delivering the product");

    /**
     * The column <code>public.transactions.created_at</code>.
     */
    public final TableField<TransactionsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.transactions.created_by</code>.
     */
    public final TableField<TransactionsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    /**
     * Create a <code>public.transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    public <O extends Record> Transactions(Table<O> child, ForeignKey<O, TransactionsRecord> key) {
        super(child, key, TRANSACTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<TransactionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TRANSACTIONS_CODE_KEY);
    }

    @Override
    public List<ForeignKey<TransactionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTIONS__TRANSACTIONS_CARRIER_USERNAME_FKEY, Keys.TRANSACTIONS__TRANSACTIONS_REQUEST_CODE_FKEY, Keys.TRANSACTIONS__TRANSACTIONS_OFFER_CODE_FKEY, Keys.TRANSACTIONS__TRANSACTIONS_CREATED_BY_FKEY);
    }

    private transient Users _transactionsCarrierUsernameFkey;
    private transient Requests _requests;
    private transient Offers _offers;
    private transient Users _transactionsCreatedByFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>transactions_carrier_username_fkey</code> key.
     */
    public Users transactionsCarrierUsernameFkey() {
        if (_transactionsCarrierUsernameFkey == null)
            _transactionsCarrierUsernameFkey = new Users(this, Keys.TRANSACTIONS__TRANSACTIONS_CARRIER_USERNAME_FKEY);

        return _transactionsCarrierUsernameFkey;
    }

    /**
     * Get the implicit join path to the <code>public.requests</code> table.
     */
    public Requests requests() {
        if (_requests == null)
            _requests = new Requests(this, Keys.TRANSACTIONS__TRANSACTIONS_REQUEST_CODE_FKEY);

        return _requests;
    }

    /**
     * Get the implicit join path to the <code>public.offers</code> table.
     */
    public Offers offers() {
        if (_offers == null)
            _offers = new Offers(this, Keys.TRANSACTIONS__TRANSACTIONS_OFFER_CODE_FKEY);

        return _offers;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>transactions_created_by_fkey</code> key.
     */
    public Users transactionsCreatedByFkey() {
        if (_transactionsCreatedByFkey == null)
            _transactionsCreatedByFkey = new Users(this, Keys.TRANSACTIONS__TRANSACTIONS_CREATED_BY_FKEY);

        return _transactionsCreatedByFkey;
    }

    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    @Override
    public Transactions as(Table<?> alias) {
        return new Transactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Table<?> name) {
        return new Transactions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, Short, String, String, String, String, LocalDateTime, LocalDateTime, UUID> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super UUID, ? super Short, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super UUID, ? super Short, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
