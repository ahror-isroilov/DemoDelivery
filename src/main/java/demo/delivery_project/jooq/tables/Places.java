/*
 * This file is generated by jOOQ.
 */
package demo.delivery_project.jooq.tables;


import demo.delivery_project.jooq.Keys;
import demo.delivery_project.jooq.Public;
import demo.delivery_project.jooq.tables.records.PlacesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Places extends TableImpl<PlacesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.places</code>
     */
    public static final Places PLACES = new Places();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlacesRecord> getRecordType() {
        return PlacesRecord.class;
    }

    /**
     * The column <code>public.places.id</code>.
     */
    public final TableField<PlacesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.places.name</code>.
     */
    public final TableField<PlacesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.places.region_id</code>.
     */
    public final TableField<PlacesRecord, UUID> REGION_ID = createField(DSL.name("region_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.places.is_deleted</code>.
     */
    public final TableField<PlacesRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Places(Name alias, Table<PlacesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Places(Name alias, Table<PlacesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.places</code> table reference
     */
    public Places(String alias) {
        this(DSL.name(alias), PLACES);
    }

    /**
     * Create an aliased <code>public.places</code> table reference
     */
    public Places(Name alias) {
        this(alias, PLACES);
    }

    /**
     * Create a <code>public.places</code> table reference
     */
    public Places() {
        this(DSL.name("places"), null);
    }

    public <O extends Record> Places(Table<O> child, ForeignKey<O, PlacesRecord> key) {
        super(child, key, PLACES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PlacesRecord> getPrimaryKey() {
        return Keys.PLACES_PKEY;
    }

    @Override
    public List<UniqueKey<PlacesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PLACES_NAME_KEY);
    }

    @Override
    public List<ForeignKey<PlacesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLACES__PLACES_REGION_ID_FKEY);
    }

    private transient Regions _regions;

    /**
     * Get the implicit join path to the <code>public.regions</code> table.
     */
    public Regions regions() {
        if (_regions == null)
            _regions = new Regions(this, Keys.PLACES__PLACES_REGION_ID_FKEY);

        return _regions;
    }

    @Override
    public Places as(String alias) {
        return new Places(DSL.name(alias), this);
    }

    @Override
    public Places as(Name alias) {
        return new Places(alias, this);
    }

    @Override
    public Places as(Table<?> alias) {
        return new Places(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Places rename(String name) {
        return new Places(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Places rename(Name name) {
        return new Places(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Places rename(Table<?> name) {
        return new Places(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, UUID, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super UUID, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super UUID, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
