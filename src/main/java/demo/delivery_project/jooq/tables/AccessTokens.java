/*
 * This file is generated by jOOQ.
 */
package demo.delivery_project.jooq.tables;


import demo.delivery_project.jooq.Keys;
import demo.delivery_project.jooq.Public;
import demo.delivery_project.jooq.tables.records.AccessTokensRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessTokens extends TableImpl<AccessTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.access_tokens</code>
     */
    public static final AccessTokens ACCESS_TOKENS = new AccessTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessTokensRecord> getRecordType() {
        return AccessTokensRecord.class;
    }

    /**
     * The column <code>public.access_tokens.token</code>.
     */
    public final TableField<AccessTokensRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.access_tokens.user_id</code>.
     */
    public final TableField<AccessTokensRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.access_tokens.expiration</code>.
     */
    public final TableField<AccessTokensRecord, LocalDateTime> EXPIRATION = createField(DSL.name("expiration"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.access_tokens.is_deleted</code>.
     */
    public final TableField<AccessTokensRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private AccessTokens(Name alias, Table<AccessTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessTokens(Name alias, Table<AccessTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.access_tokens</code> table reference
     */
    public AccessTokens(String alias) {
        this(DSL.name(alias), ACCESS_TOKENS);
    }

    /**
     * Create an aliased <code>public.access_tokens</code> table reference
     */
    public AccessTokens(Name alias) {
        this(alias, ACCESS_TOKENS);
    }

    /**
     * Create a <code>public.access_tokens</code> table reference
     */
    public AccessTokens() {
        this(DSL.name("access_tokens"), null);
    }

    public <O extends Record> AccessTokens(Table<O> child, ForeignKey<O, AccessTokensRecord> key) {
        super(child, key, ACCESS_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccessTokensRecord> getPrimaryKey() {
        return Keys.ACCESS_TOKENS_PKEY;
    }

    @Override
    public List<ForeignKey<AccessTokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCESS_TOKENS__ACCESS_TOKENS_USER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.ACCESS_TOKENS__ACCESS_TOKENS_USER_ID_FKEY);

        return _users;
    }

    @Override
    public AccessTokens as(String alias) {
        return new AccessTokens(DSL.name(alias), this);
    }

    @Override
    public AccessTokens as(Name alias) {
        return new AccessTokens(alias, this);
    }

    @Override
    public AccessTokens as(Table<?> alias) {
        return new AccessTokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessTokens rename(String name) {
        return new AccessTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessTokens rename(Name name) {
        return new AccessTokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessTokens rename(Table<?> name) {
        return new AccessTokens(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, UUID, LocalDateTime, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super UUID, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super UUID, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
