/*
 * This file is generated by jOOQ.
 */
package demo.delivery_project.jooq.tables.records;


import demo.delivery_project.jooq.tables.RolePermissions;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolePermissionsRecord extends TableRecordImpl<RolePermissionsRecord> implements Record2<UUID, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.role_permissions.role_id</code>.
     */
    public void setRoleId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.role_permissions.role_id</code>.
     */
    public UUID getRoleId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.role_permissions.permission</code>.
     */
    public void setPermission(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.role_permissions.permission</code>.
     */
    public String getPermission() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return RolePermissions.ROLE_PERMISSIONS.ROLE_ID;
    }

    @Override
    public Field<String> field2() {
        return RolePermissions.ROLE_PERMISSIONS.PERMISSION;
    }

    @Override
    public UUID component1() {
        return getRoleId();
    }

    @Override
    public String component2() {
        return getPermission();
    }

    @Override
    public UUID value1() {
        return getRoleId();
    }

    @Override
    public String value2() {
        return getPermission();
    }

    @Override
    public RolePermissionsRecord value1(UUID value) {
        setRoleId(value);
        return this;
    }

    @Override
    public RolePermissionsRecord value2(String value) {
        setPermission(value);
        return this;
    }

    @Override
    public RolePermissionsRecord values(UUID value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RolePermissionsRecord
     */
    public RolePermissionsRecord() {
        super(RolePermissions.ROLE_PERMISSIONS);
    }

    /**
     * Create a detached, initialised RolePermissionsRecord
     */
    public RolePermissionsRecord(UUID roleId, String permission) {
        super(RolePermissions.ROLE_PERMISSIONS);

        setRoleId(roleId);
        setPermission(permission);
        resetChangedOnNotNull();
    }
}
