/*
 * This file is generated by jOOQ.
 */
package demo.delivery_project.jooq.tables;


import demo.delivery_project.jooq.Keys;
import demo.delivery_project.jooq.Public;
import demo.delivery_project.jooq.tables.records.RequestsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Requests extends TableImpl<RequestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.requests</code>
     */
    public static final Requests REQUESTS = new Requests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestsRecord> getRecordType() {
        return RequestsRecord.class;
    }

    /**
     * The column <code>public.requests.id</code>.
     */
    public final TableField<RequestsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.requests.product_id</code>.
     */
    public final TableField<RequestsRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.requests.code</code>.
     */
    public final TableField<RequestsRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.requests.place_name</code>.
     */
    public final TableField<RequestsRecord, String> PLACE_NAME = createField(DSL.name("place_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.requests.status</code>.
     */
    public final TableField<RequestsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(32).defaultValue(DSL.field(DSL.raw("'OPEN'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.requests.created_at</code>.
     */
    public final TableField<RequestsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.requests.created_by</code>.
     */
    public final TableField<RequestsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    private Requests(Name alias, Table<RequestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Requests(Name alias, Table<RequestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.requests</code> table reference
     */
    public Requests(String alias) {
        this(DSL.name(alias), REQUESTS);
    }

    /**
     * Create an aliased <code>public.requests</code> table reference
     */
    public Requests(Name alias) {
        this(alias, REQUESTS);
    }

    /**
     * Create a <code>public.requests</code> table reference
     */
    public Requests() {
        this(DSL.name("requests"), null);
    }

    public <O extends Record> Requests(Table<O> child, ForeignKey<O, RequestsRecord> key) {
        super(child, key, REQUESTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RequestsRecord> getPrimaryKey() {
        return Keys.REQUESTS_PKEY;
    }

    @Override
    public List<UniqueKey<RequestsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.REQUESTS_CODE_KEY);
    }

    @Override
    public List<ForeignKey<RequestsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REQUESTS__REQUESTS_PRODUCT_ID_FKEY, Keys.REQUESTS__REQUESTS_PLACE_NAME_FKEY, Keys.REQUESTS__REQUESTS_CREATED_BY_FKEY);
    }

    private transient Products _products;
    private transient Places _places;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    public Products products() {
        if (_products == null)
            _products = new Products(this, Keys.REQUESTS__REQUESTS_PRODUCT_ID_FKEY);

        return _products;
    }

    /**
     * Get the implicit join path to the <code>public.places</code> table.
     */
    public Places places() {
        if (_places == null)
            _places = new Places(this, Keys.REQUESTS__REQUESTS_PLACE_NAME_FKEY);

        return _places;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.REQUESTS__REQUESTS_CREATED_BY_FKEY);

        return _users;
    }

    @Override
    public Requests as(String alias) {
        return new Requests(DSL.name(alias), this);
    }

    @Override
    public Requests as(Name alias) {
        return new Requests(alias, this);
    }

    @Override
    public Requests as(Table<?> alias) {
        return new Requests(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Requests rename(String name) {
        return new Requests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Requests rename(Name name) {
        return new Requests(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Requests rename(Table<?> name) {
        return new Requests(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, String, String, String, LocalDateTime, UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super UUID, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super UUID, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
